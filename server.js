import express from 'express';
import axios from 'axios';
import cron from 'node-cron';
import dotenv from 'dotenv';
import Parser from 'rss-parser';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const app = express();
const PORT = 3000;
const parser = new Parser();

const metaApiKey = process.env.META_API_KEY;
const phoneNumberId = process.env.PHONE_NUMBER_ID;
const phoneNumber = process.env.PHONE_NUMBER;

// Inicializa o cliente Gemini com sua chave de API
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' }); // Usando o modelo gemini-2.0-flash

// FunÃ§Ã£o para buscar notÃ­cias
async function buscarNoticias() {
    try {
        const feeds = [
            'https://g1.globo.com/rss/g1/',
            'https://feeds.folha.uol.com.br/emcimadahora/rss091.xml',
            'https://www.theverge.com/rss/index.xml',
            'https://rss.nytimes.com/services/xml/rss/nyt/World.xml',
            'https://feeds.bbci.co.uk/news/rss.xml',
            'https://www.theguardian.com/international/rss'
        ];

        let noticias = [];

        for (let feed of feeds) {
            const data = await parser.parseURL(feed);
            console.log("Feed:", data.title);
            noticias.push(...data.items.slice(0, 3).map(item => {
                return `ðŸ“Œ ${data.title}:
                    TÃ­tulo: ${item.title}
                    Data: ${item.pubDate || 'Data nÃ£o disponÃ­vel'}
                    Link: ${item.link || 'Link nÃ£o disponÃ­vel'}
                    Resumo: ${item.contentSnippet || item.content || 'Resumo nÃ£o disponÃ­vel'}`;
            }));
        }

        // Preparar o prompt para a Gemini API
        const prompt = `Summarize the provided news objectively, always indicating at the beginning of each item which news website it belongs to and including its respective link at the end of each item. Always provide the summary in Brazilian Portuguese. Here are the news: ${noticias.join(' | ')}`;

        // Chamada para a Gemini API para gerar o conteÃºdo
        const result = await model.generateContent(prompt);

        // Retorna o conteÃºdo gerado pela Gemini API
        return result.response.text();
    } catch (error) {
        console.error("Erro ao buscar notÃ­cias:", error);
        return "NÃ£o foi possÃ­vel obter notÃ­cias hoje.";
    }
};

async function enviarNoticias(message) {
    try {
        const response = await axios.post(
            `https://graph.facebook.com/v22.0/${phoneNumberId}/messages`,
            {
                messaging_product: "whatsapp",
                to: phoneNumber,
                type: "template",
                template: {
                    name: "newsbot",
                    language: { code: "pt_BR" },
                    components: [
                        {
                            type: "body",
                            parameters: [
                                { type: "text", text: message }
                            ]
                        }
                    ]
                }
            },
            {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${metaApiKey}`
                }
            }
        );

        return response.data;
    } catch (error) {
        console.error("Erro ao enviar notÃ­cias:", error);
        return "Erro ao enviar notÃ­cias.";
    }
}

app.get("/", (req, res) => {
    res.send("Welcome to the News Summarizer API!");
});

// Endpoint para buscar notÃ­cias manualmente
app.get("/noticias", async (req, res) => {
    try {
        const noticias = await buscarNoticias();
        
        res.send(noticias);
    } catch (error) {
        console.error("Erro ao buscar notÃ­cias:", error);
        res.status(500).send("Erro ao buscar notÃ­cias.");
    }
});

// Agenda a busca de notÃ­cias diariamente Ã s 8h
cron.schedule('0 8 * * *', async () => {    
    const noticias = await buscarNoticias();
    const message = await enviarNoticias(noticias);
    console.log("Resumo das notÃ­cias do dia:", noticias, "message:", message);
});

/*(async () => {
    const noticias = await buscarNoticias();
    const message = await enviarNoticias(noticias);
    console.log("Resumo das notÃ­cias do dia:", noticias, "message:", message);
})(); */

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
